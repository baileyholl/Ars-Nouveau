plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.+'
}

version = mod_version


if (System.getenv('BUILD_NUMBER') != null) {
    version += "." + System.getenv('BUILD_NUMBER')
}

group = 'com.hollingsworth.ars_nouveau' // http://maven.apache.org/guides/mini/guide-naming-conventions.html

base {
    archivesName = mod_id + '-' + minecraft_version
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
java.withSourcesJar()

subsystems {
    parchment {
        minecraftVersion = "1.21"
        mappingsVersion = project.parchment_version
    }
}

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
        systemProperty 'forge.logging.console.level', 'debug'

        modSource sourceSets.main
    }

    server {
        programArgument '--nogui'
        workingDirectory 'server'
    }

    data {
        getArguments().addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

minecraft.accessTransformers.files(
        file('src/main/resources/META-INF/accesstransformer.cfg')
)

repositories {
    mavenLocal()
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroup("software.bernie.geckolib")
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                url "https://cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Illusive Soulworks maven"
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = 'Forge'
        url = "https://maven.minecraftforge.net"
    }
    maven {
        name = "OctoStudios"
        url = uri("https://maven.octo-studios.com/releases")
    }
}

jarJar.enable()

tasks.named('jarJar') {}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

//    jarJar(group: 'software.bernie.geckolib', name: "geckolib-neoforge-${minecraft_version}", version: "[4.5,)") {
//        jarJar.pin(it, "${geckolib_version}")
//    }
    implementation "software.bernie.geckolib:geckolib-neoforge-1.21.1:${geckolib_version}"
//
    implementation(jarJar(group: 'vazkii.patchouli', name: 'Patchouli', version: '[1.21,)') {
        jarJar.pin(it, patchouli_version)
    })

    runtimeOnly "com.illusivesoulworks.caelus:caelus-neoforge:${caelus_version}"
    compileOnly "com.illusivesoulworks.caelus:caelus-neoforge:${caelus_version}:api"

    compileOnly "mezz.jei:jei-1.21-neoforge-api:${jei_version}"
    implementation "mezz.jei:jei-1.21-neoforge:${jei_version}"
    implementation 'com.github.glitchfiend:TerraBlender-neoforge:1.21-4.0.0.0'
    implementation "curse.maven:jade-324717:5444008"
    implementation "top.theillusivec4.curios:curios-neoforge:${curios_version}+1.21"

    implementation "curse.maven:ars-additions-974408:5698511"
}

jar {
    manifest {
        attributes([
                "Specification-Title": "ArsNouveau",
                "Specification-Vendor": "baileyh",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": mod_version,
                "Implementation-Vendor" :"baileyh",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "ars_nouveau.mixins.json"
        ])
    }
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}