plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.+'
    id 'io.github.goooler.shadow' version '8.1.7'
}

version = mod_version


if (System.getenv('BUILD_NUMBER') != null) {
    version += "." + System.getenv('BUILD_NUMBER')
}

group = 'com.hollingsworth.ars_nouveau' // http://maven.apache.org/guides/mini/guide-naming-conventions.html

base {
    archivesName = mod_id + '-' + minecraft_version
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
java.withSourcesJar()

subsystems {
    parchment {
        minecraftVersion = "1.21.1"
        mappingsVersion = project.parchment_version
    }
}

configurations {
    libraries
    // This will make sure that all dependencies that you add to the libraries configuration will also be added to the implementation configuration
    // This way, you only need one dependency declaration for both runtime and compile dependencies
    shade
    implementation.extendsFrom libraries
    runtimeClasspath.extendsFrom localRuntime

    shade
    implementation.extendsFrom shade

}
runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
        systemProperty 'forge.logging.console.level', 'debug'

        modSource sourceSets.main
        dependencies {
            runtime project.configurations.libraries
            runtime project.configurations.shade
        }
    }

    clientAlt {
        run 'client'

        arguments '--username', 'Dev2'
    }

    server {
        programArgument '--nogui'
        workingDirectory 'server'
    }

    data {
        getArguments().addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

minecraft.accessTransformers.files(
        file('src/main/resources/META-INF/accesstransformer.cfg')
)

repositories {
    mavenLocal()
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroup("software.bernie.geckolib")
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                url "https://cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "Illusive Soulworks maven"
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = 'Forge'
        url = "https://maven.minecraftforge.net"
    }
    maven {
        name = "OctoStudios"
        url = uri("https://maven.octo-studios.com/releases")
    }
    maven {
        name = 'TerraformersMC'
        url = 'https://maven.terraformersmc.com/'
        content {
            includeGroup 'dev.emi'
        }
    }
}

jarJar.enable()

tasks.named('jarJar') {}


dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    implementation "software.bernie.geckolib:geckolib-neoforge-1.21.1:${geckolib_version}"
    compileOnly('vazkii.patchouli:Patchouli:1.21-87-NEOFORGE')

    localRuntime "com.illusivesoulworks.caelus:caelus-neoforge:${caelus_version}"
    compileOnly "com.illusivesoulworks.caelus:caelus-neoforge:${caelus_version}:api"

    compileOnly "mezz.jei:jei-1.21.1-neoforge-api:${jei_version}"
    implementation "mezz.jei:jei-1.21.1-neoforge:${jei_version}"
    compileOnly "dev.emi:emi-neoforge:${emi_version}:api"
    implementation 'com.github.glitchfiend:TerraBlender-neoforge:1.21-4.0.0.0'
    implementation "curse.maven:jade-324717:5444008"
    implementation "top.theillusivec4.curios:curios-neoforge:${curios_version}+1.21"

    localRuntime "dev.emi:emi-neoforge:${emi_version}"
    localRuntime 'curse.maven:ftb-teams-forge-404468:5631446'
    localRuntime 'curse.maven:ftb-chunks-forge-314906:5710609'
    localRuntime 'curse.maven:ftb-library-forge-404465:5754910'
    localRuntime 'curse.maven:architectury-api-419699:5553800'
//    localRuntime 'curse.maven:productivebees-377897:6154395'
    implementation(jarJar(group: 'com.hollingsworth.nuggets', name: 'nuggets-neoforge-1.21', version:'[1.0.4,)'){
        jarJar.pin(it, '1.0.4')
    })
    localRuntime "maven.modrinth:cloth-config:15.0.140+neoforge"
  //localRuntime "curse.maven:immersive-portals-for-forge-355440:6013197"
    //implementation "curse.maven:ars-elemental-561470:6086122"
    shade 'org.apache.lucene:lucene-core:10.1.0'
    shade 'org.apache.lucene:lucene-analysis-common:10.1.0'
    shade 'org.apache.lucene:lucene-queryparser:10.1.0'

//    implementation 'com.hollingsworth.nuggets:nuggets-neoforge-1.21:1.0.4'
}

jar {
    manifest {
        attributes([
                "Specification-Title": "ArsNouveau",
                "Specification-Vendor": "baileyh",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": mod_version,
                "Implementation-Vendor" :"baileyh",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "ars_nouveau.mixins.json"
        ])
    }
    finalizedBy shadowJar
}
shadowJar {
    from sourceSets.main.output.classesDirs
    from sourceSets.main.output.resourcesDir
    configurations = [project.configurations.shade] // <- Tell shadowJar to shade dependencies from 'shade'
    relocate 'org.apache.lucene', 'org.apache.lucene.ars_nouveau'
    finalizedBy('jarJar')
    archiveClassifier = null
    mergeServiceFiles()
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}